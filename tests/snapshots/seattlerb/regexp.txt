Program {
    source: "/wtf/\n\n/wtf/m\n\n/wtf/n\n\n/wtf/nm\n\n/wtf/nmnmnmnm\n",
    header: Header {
        prism_major: 1,
        prism_minor: 3,
        prism_patch: 0,
        only_semantics_serialized: false,
        encoding_name: "UTF-8",
        start_line: 1,
        newline_offsets: [
            0,
            6,
            7,
            14,
            15,
            22,
            23,
            31,
            32,
            46,
        ],
        comments: [],
        magic_comments: [],
        end_keyword: None,
        errors: [],
        warnings: [
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 0, length: 5 },
                level: 1,
            },
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 7, length: 6 },
                level: 1,
            },
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 15, length: 6 },
                level: 1,
            },
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 23, length: 7 },
                level: 1,
            },
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 32, length: 13 },
                level: 1,
            },
        ],
        content_pool_offset: 399,
        content_pool_size: 0,
    },
    root: NodeRef(6),
    nodes: [
        Node {
            identifier: 2,
            location: Location { start: 0, length: 5 },
            node_kind: RegularExpressionNode(
                RegularExpressionNode {
                    flags: BitFlags<RegularExpressionFlags> {
                        bits: 0b1000000000011,
                        flags: NEWLINE | STATIC_LITERAL | FORCED_US_ASCII_ENCODING,
                    },
                    opening_loc: Location { start: 0, length: 1 },
                    content_loc: Location { start: 1, length: 3 },
                    closing_loc: Location { start: 4, length: 1 },
                    unescaped: Shared(1, 3),
                },
            ),
        },
        Node {
            identifier: 3,
            location: Location { start: 7, length: 6 },
            node_kind: RegularExpressionNode(
                RegularExpressionNode {
                    flags: BitFlags<RegularExpressionFlags> {
                        bits: 0b1000000010011,
                        flags: NEWLINE | STATIC_LITERAL | MULTI_LINE | FORCED_US_ASCII_ENCODING,
                    },
                    opening_loc: Location { start: 7, length: 1 },
                    content_loc: Location { start: 8, length: 3 },
                    closing_loc: Location { start: 11, length: 2 },
                    unescaped: Shared(8, 3),
                },
            ),
        },
        Node {
            identifier: 4,
            location: Location { start: 15, length: 6 },
            node_kind: RegularExpressionNode(
                RegularExpressionNode {
                    flags: BitFlags<RegularExpressionFlags> {
                        bits: 0b1000010000011,
                        flags: NEWLINE | STATIC_LITERAL | ASCII_8BIT | FORCED_US_ASCII_ENCODING,
                    },
                    opening_loc: Location { start: 15, length: 1 },
                    content_loc: Location { start: 16, length: 3 },
                    closing_loc: Location { start: 19, length: 2 },
                    unescaped: Shared(16, 3),
                },
            ),
        },
        Node {
            identifier: 5,
            location: Location { start: 23, length: 7 },
            node_kind: RegularExpressionNode(
                RegularExpressionNode {
                    flags: BitFlags<RegularExpressionFlags> {
                        bits: 0b1000010010011,
                        flags: NEWLINE | STATIC_LITERAL | MULTI_LINE | ASCII_8BIT | FORCED_US_ASCII_ENCODING,
                    },
                    opening_loc: Location { start: 23, length: 1 },
                    content_loc: Location { start: 24, length: 3 },
                    closing_loc: Location { start: 27, length: 3 },
                    unescaped: Shared(24, 3),
                },
            ),
        },
        Node {
            identifier: 6,
            location: Location { start: 32, length: 13 },
            node_kind: RegularExpressionNode(
                RegularExpressionNode {
                    flags: BitFlags<RegularExpressionFlags> {
                        bits: 0b1000010010011,
                        flags: NEWLINE | STATIC_LITERAL | MULTI_LINE | ASCII_8BIT | FORCED_US_ASCII_ENCODING,
                    },
                    opening_loc: Location { start: 32, length: 1 },
                    content_loc: Location { start: 33, length: 3 },
                    closing_loc: Location { start: 36, length: 9 },
                    unescaped: Shared(33, 3),
                },
            ),
        },
        Node {
            identifier: 1,
            location: Location { start: 0, length: 45 },
            node_kind: StatementsNode(
                StatementsNode {
                    flags: BitFlags<DefaultNodeFlags> {
                        bits: 0b0,
                    },
                    body: [
                        NodeRef(0),
                        NodeRef(1),
                        NodeRef(2),
                        NodeRef(3),
                        NodeRef(4),
                    ],
                },
            ),
        },
        Node {
            identifier: 7,
            location: Location { start: 0, length: 45 },
            node_kind: ProgramNode(
                ProgramNode {
                    flags: BitFlags<DefaultNodeFlags> {
                        bits: 0b0,
                    },
                    locals: [],
                    statements: NodeRef(5),
                },
            ),
        },
    ],
    constants: [],
    content_pool: [],
}
