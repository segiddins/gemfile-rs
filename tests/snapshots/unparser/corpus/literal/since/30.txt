Program {
    source: "",
    header: Header {
        prism_major: 1,
        prism_minor: 3,
        prism_patch: 0,
        only_semantics_serialized: false,
        encoding_name: "UTF-8",
        start_line: 1,
        newline_offsets: [
            0,
            9,
            18,
            34,
            52,
        ],
        comments: [],
        magic_comments: [],
        end_keyword: None,
        errors: [],
        warnings: [
            Warning {
                type: 317,
                message: "assigned but unused variable - a",
                location: Location { start: 6, length: 1 },
                level: 1,
            },
            Warning {
                type: 317,
                message: "assigned but unused variable - foo",
                location: Location { start: 47, length: 3 },
                level: 1,
            },
        ],
        content_pool_offset: 307,
        content_pool_size: 2,
    },
    root: NodeRef(22),
    nodes: [
        Node {
            identifier: 2,
            location: Location { start: 0, length: 1 },
            node_kind: IntegerNode(
                IntegerNode {
                    flags: BitFlags<IntegerBaseFlags> {
                        bits: 0b1010,
                        flags: DECIMAL | HEXADECIMAL,
                    },
                    value: Integer {
                        is_negative: false,
                        words: [
                            1,
                        ],
                    },
                },
            ),
        },
        Node {
            identifier: 3,
            location: Location { start: 6, length: 1 },
            node_kind: LocalVariableTargetNode(
                LocalVariableTargetNode {
                    name: ConstantRef(1),
                    depth: 0,
                },
            ),
        },
        Node {
            identifier: 4,
            location: Location { start: 5, length: 3 },
            node_kind: ArrayPatternNode(
                ArrayPatternNode {
                    constant: None,
                    requireds: [
                        NodeRef(1),
                    ],
                    rest: None,
                    posts: [],
                    opening_loc: Some(
                        Location { start: 5, length: 1 },
                    ),
                    closing_loc: Some(
                        Location { start: 7, length: 1 },
                    ),
                },
            ),
        },
        Node {
            identifier: 5,
            location: Location { start: 0, length: 8 },
            node_kind: MatchRequiredNode(
                MatchRequiredNode {
                    value: NodeRef(0),
                    pattern: NodeRef(2),
                    operator_loc: Location { start: 2, length: 2 },
                },
            ),
        },
        Node {
            identifier: 6,
            location: Location { start: 9, length: 1 },
            node_kind: IntegerNode(
                IntegerNode {
                    flags: BitFlags<IntegerBaseFlags> {
                        bits: 0b1010,
                        flags: DECIMAL | HEXADECIMAL,
                    },
                    value: Integer {
                        is_negative: false,
                        words: [
                            1,
                        ],
                    },
                },
            ),
        },
        Node {
            identifier: 7,
            location: Location { start: 15, length: 1 },
            node_kind: SplatNode(
                SplatNode {
                    operator_loc: Location { start: 15, length: 1 },
                    expression: None,
                },
            ),
        },
        Node {
            identifier: 8,
            location: Location { start: 14, length: 3 },
            node_kind: ArrayPatternNode(
                ArrayPatternNode {
                    constant: None,
                    requireds: [],
                    rest: Some(
                        NodeRef(5),
                    ),
                    posts: [],
                    opening_loc: Some(
                        Location { start: 14, length: 1 },
                    ),
                    closing_loc: Some(
                        Location { start: 16, length: 1 },
                    ),
                },
            ),
        },
        Node {
            identifier: 9,
            location: Location { start: 9, length: 8 },
            node_kind: MatchRequiredNode(
                MatchRequiredNode {
                    value: NodeRef(4),
                    pattern: NodeRef(6),
                    operator_loc: Location { start: 11, length: 2 },
                },
            ),
        },
        Node {
            identifier: 10,
            location: Location { start: 18, length: 1 },
            node_kind: IntegerNode(
                IntegerNode {
                    flags: BitFlags<IntegerBaseFlags> {
                        bits: 0b1010,
                        flags: DECIMAL | HEXADECIMAL,
                    },
                    value: Integer {
                        is_negative: false,
                        words: [
                            1,
                        ],
                    },
                },
            ),
        },
        Node {
            identifier: 11,
            location: Location { start: 24, length: 1 },
            node_kind: SplatNode(
                SplatNode {
                    operator_loc: Location { start: 24, length: 1 },
                    expression: None,
                },
            ),
        },
        Node {
            identifier: 12,
            location: Location { start: 27, length: 2 },
            node_kind: IntegerNode(
                IntegerNode {
                    flags: BitFlags<IntegerBaseFlags> {
                        bits: 0b1010,
                        flags: DECIMAL | HEXADECIMAL,
                    },
                    value: Integer {
                        is_negative: false,
                        words: [
                            42,
                        ],
                    },
                },
            ),
        },
        Node {
            identifier: 13,
            location: Location { start: 31, length: 1 },
            node_kind: SplatNode(
                SplatNode {
                    operator_loc: Location { start: 31, length: 1 },
                    expression: None,
                },
            ),
        },
        Node {
            identifier: 14,
            location: Location { start: 23, length: 10 },
            node_kind: FindPatternNode(
                FindPatternNode {
                    constant: None,
                    left: NodeRef(9),
                    requireds: [
                        NodeRef(10),
                    ],
                    right: NodeRef(11),
                    opening_loc: Some(
                        Location { start: 23, length: 1 },
                    ),
                    closing_loc: Some(
                        Location { start: 32, length: 1 },
                    ),
                },
            ),
        },
        Node {
            identifier: 15,
            location: Location { start: 18, length: 15 },
            node_kind: MatchPredicateNode(
                MatchPredicateNode {
                    value: NodeRef(8),
                    pattern: NodeRef(12),
                    operator_loc: Location { start: 20, length: 2 },
                },
            ),
        },
        Node {
            identifier: 16,
            location: Location { start: 34, length: 1 },
            node_kind: IntegerNode(
                IntegerNode {
                    flags: BitFlags<IntegerBaseFlags> {
                        bits: 0b1010,
                        flags: DECIMAL | HEXADECIMAL,
                    },
                    value: Integer {
                        is_negative: false,
                        words: [
                            1,
                        ],
                    },
                },
            ),
        },
        Node {
            identifier: 17,
            location: Location { start: 40, length: 1 },
            node_kind: SplatNode(
                SplatNode {
                    operator_loc: Location { start: 40, length: 1 },
                    expression: None,
                },
            ),
        },
        Node {
            identifier: 18,
            location: Location { start: 43, length: 1 },
            node_kind: LocalVariableTargetNode(
                LocalVariableTargetNode {
                    name: ConstantRef(1),
                    depth: 0,
                },
            ),
        },
        Node {
            identifier: 19,
            location: Location { start: 47, length: 3 },
            node_kind: LocalVariableTargetNode(
                LocalVariableTargetNode {
                    name: ConstantRef(2),
                    depth: 0,
                },
            ),
        },
        Node {
            identifier: 20,
            location: Location { start: 46, length: 4 },
            node_kind: SplatNode(
                SplatNode {
                    operator_loc: Location { start: 46, length: 1 },
                    expression: Some(
                        NodeRef(17),
                    ),
                },
            ),
        },
        Node {
            identifier: 21,
            location: Location { start: 39, length: 12 },
            node_kind: FindPatternNode(
                FindPatternNode {
                    constant: None,
                    left: NodeRef(15),
                    requireds: [
                        NodeRef(16),
                    ],
                    right: NodeRef(18),
                    opening_loc: Some(
                        Location { start: 39, length: 1 },
                    ),
                    closing_loc: Some(
                        Location { start: 50, length: 1 },
                    ),
                },
            ),
        },
        Node {
            identifier: 22,
            location: Location { start: 34, length: 17 },
            node_kind: MatchPredicateNode(
                MatchPredicateNode {
                    value: NodeRef(14),
                    pattern: NodeRef(19),
                    operator_loc: Location { start: 36, length: 2 },
                },
            ),
        },
        Node {
            identifier: 1,
            location: Location { start: 0, length: 51 },
            node_kind: StatementsNode(
                StatementsNode {
                    body: [
                        NodeRef(3),
                        NodeRef(7),
                        NodeRef(13),
                        NodeRef(20),
                    ],
                },
            ),
        },
        Node {
            identifier: 23,
            location: Location { start: 0, length: 51 },
            node_kind: ProgramNode(
                ProgramNode {
                    locals: [
                        ConstantRef(1),
                        ConstantRef(2),
                    ],
                    statements: NodeRef(21),
                },
            ),
        },
    ],
    constants: [
        Owned(6, 1),
        Owned(47, 3),
    ],
    content_pool: [],
}
