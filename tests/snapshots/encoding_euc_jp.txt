Program {
    source: "# encoding: euc-jp\n\n# \\x8E indicates a double-byte character, \\x01 is not a valid second byte in euc-jp\n\"\\x8E\\x01\"\n\n%W[\"\\x8E\\x01\"]\n",
    header: Header {
        prism_major: 1,
        prism_minor: 3,
        prism_patch: 0,
        only_semantics_serialized: false,
        encoding_name: "EUC-JP",
        start_line: 1,
        newline_offsets: [
            0,
            19,
            20,
            104,
            115,
            116,
            131,
        ],
        comments: [
            Comment {
                type: 0,
                location: Location { start: 0, length: 18 },
            },
            Comment {
                type: 0,
                location: Location { start: 20, length: 83 },
            },
        ],
        magic_comments: [
            MagicComment,
        ],
        end_keyword: None,
        errors: [],
        warnings: [
            Warning {
                type: 318,
                message: "possibly useless use of a literal in void context",
                location: Location { start: 104, length: 10 },
                level: 1,
            },
        ],
        content_pool_offset: 158,
        content_pool_size: 0,
    },
    root: NodeRef(4),
    nodes: [
        Node {
            identifier: 2,
            location: Location { start: 104, length: 10 },
            node_kind: StringNode(
                StringNode {
                    flags: BitFlags<StringFlags> {
                        bits: 0b1,
                        flags: NEWLINE,
                    },
                    opening_loc: Some(
                        Location { start: 104, length: 1 },
                    ),
                    content_loc: Location { start: 105, length: 8 },
                    closing_loc: Some(
                        Location { start: 113, length: 1 },
                    ),
                    unescaped: Owned("�\u{1}"),
                },
            ),
        },
        Node {
            identifier: 4,
            location: Location { start: 119, length: 10 },
            node_kind: StringNode(
                StringNode {
                    flags: BitFlags<StringFlags> {
                        bits: 0b0,
                    },
                    opening_loc: None,
                    content_loc: Location { start: 119, length: 10 },
                    closing_loc: None,
                    unescaped: Owned("\"�\u{1}\""),
                },
            ),
        },
        Node {
            identifier: 3,
            location: Location { start: 116, length: 14 },
            node_kind: ArrayNode(
                ArrayNode {
                    flags: BitFlags<ArrayNodeFlags> {
                        bits: 0b1,
                        flags: NEWLINE,
                    },
                    elements: [
                        NodeRef(1),
                    ],
                    opening_loc: Some(
                        Location { start: 116, length: 3 },
                    ),
                    closing_loc: Some(
                        Location { start: 129, length: 1 },
                    ),
                },
            ),
        },
        Node {
            identifier: 1,
            location: Location { start: 104, length: 26 },
            node_kind: StatementsNode(
                StatementsNode {
                    flags: BitFlags<DefaultNodeFlags> {
                        bits: 0b0,
                    },
                    body: [
                        NodeRef(0),
                        NodeRef(2),
                    ],
                },
            ),
        },
        Node {
            identifier: 5,
            location: Location { start: 104, length: 26 },
            node_kind: ProgramNode(
                ProgramNode {
                    flags: BitFlags<DefaultNodeFlags> {
                        bits: 0b0,
                    },
                    locals: [],
                    statements: NodeRef(3),
                },
            ),
        },
    ],
    constants: [],
    content_pool: [],
}
